/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Capa1_Presentacion;

import Capa2_Aplicacion.ServGestionarAfp;
import Capa3_Dominio.Afp;
import Capa1_Presentacion.Utilidades.EstructuraAbs;
import Capa5_Excepcion.ExcepcionSinSoporteOperacion;
import Capa5_Excepcion.Mensaje;
import Capa1_Presentacion.Utilidades.AtajosTecladoDlg;
import Capa1_Presentacion.Utilidades.EstiloEtiqueta;
import Capa6_Globales.Objeto;
import Capa6_Globales.VariablesGlobales;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.ListModel;

/**
 *
 * @author Junior
 */
public class DlgAfp extends EstructuraAbs {

    /**
     * Creates new form DlgAfp
     */
    private transient Afp afp;
    private transient List<Afp> listaAfp;
    private transient Objeto datosAfp;
    private transient ServGestionarAfp gestionarAfp;
    private transient EstiloEtiqueta estilo;
    
    DefaultListModel modeloLista;
    private boolean estado;
    private int idAfp = 0;
    private String nombre;
    private Double porcentaje = 0.0;   
        
    public DlgAfp(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setSize(390,400);
        lblImagen.setPreferredSize(new Dimension(390, 398));
        setLocationRelativeTo(null);
        setTitle("Gestionar AFP");
        estadoDefault();  
    }
    
    public void verificarNombreAfp(String parNombre){              
        try{
            gestionarAfp = new ServGestionarAfp();
            afp = gestionarAfp.verificarNombreAfp(parNombre);  
        }catch (Exception e) {   
            Mensaje.mostrarError(this, Mensaje.ERROR_SERVICIO + "VerificarNombreAfp()");            
        } 
        if (afp == null){
            Mensaje.mostrarAfirmacion(this, Mensaje.OBJETO_NULO + "AFP");
        }
    }             
            
    public void consultarAfps(){         
        try{
            gestionarAfp = new ServGestionarAfp();
            listaAfp = gestionarAfp.buscarAfps();  
        } catch (Exception e) {
            Mensaje.mostrarError(this, Mensaje.ERROR_SERVICIO + "ConsultarAfps()");   
        }
        if (listaAfp.isEmpty()){
            Mensaje.mostrarAfirmacion(this, Mensaje.LISTA_VACIA + "AFPs");
        }
    } 

    public void llenarLista(){
        consultarAfps();
        lstAfp.removeAll();
        if(listaAfp != null){
                modeloLista = new DefaultListModel();
                lstAfp.setModel(modeloLista);
                listaAfp.stream().map((objetoAfp) -> {
                    datosAfp = new Objeto(objetoAfp.getNombre(), objetoAfp.getIdafp(), objetoAfp.getPorcentaje());
                return objetoAfp;
            }).forEachOrdered((_item) -> {    
                modeloLista.addElement(datosAfp);
            });
            }   
    }   
   
    public void mostrarDatos(Afp parAfp){
        if(parAfp != null){
        txtCodigo.setText(String.valueOf(parAfp.getIdafp()));
        txtNombre.setText(parAfp.getNombre());
        txtPorcentaje.setText(String.valueOf(parAfp.getPorcentaje()));        
        btnEliminar.setEnabled(true);
        btnTerminar.setEnabled(true);
        }
    }   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpnDatosAfp = new javax.swing.JPanel();
        lblCodigo = new javax.swing.JLabel();
        lblNombre = new javax.swing.JLabel();
        lblPorcentaje = new javax.swing.JLabel();
        txtCodigo = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        txtPorcentaje = new javax.swing.JTextField();
        btnNuevo = new javax.swing.JButton();
        lblAfps = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstAfp = new javax.swing.JList<>();
        btnRegistrar = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnTerminar = new javax.swing.JButton();
        lblImagen = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(390, 400));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jpnDatosAfp.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos"));
        jpnDatosAfp.setName(""); // NOI18N
        jpnDatosAfp.setOpaque(false);
        jpnDatosAfp.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblCodigo.setText("Codigo:");
        jpnDatosAfp.add(lblCodigo, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, -1, 20));

        lblNombre.setText("Nombre:");
        jpnDatosAfp.add(lblNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, 20));

        lblPorcentaje.setText("Porcentaje:");
        jpnDatosAfp.add(lblPorcentaje, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, -1, 20));
        jpnDatosAfp.add(txtCodigo, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 30, 80, -1));
        jpnDatosAfp.add(txtNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 60, 180, -1));

        txtPorcentaje.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPorcentajeKeyTyped(evt);
            }
        });
        jpnDatosAfp.add(txtPorcentaje, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 90, 80, -1));

        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });
        jpnDatosAfp.add(btnNuevo, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 30, 80, -1));

        getContentPane().add(jpnDatosAfp, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, 320, 140));
        jpnDatosAfp.getAccessibleContext().setAccessibleName("AFP");

        lblAfps.setText("Registro AFP:");
        getContentPane().add(lblAfps, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 160, 80, 20));

        lstAfp.setEnabled(false);
        lstAfp.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstAfpValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lstAfp);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 160, 210, 110));

        btnRegistrar.setText("Registrar");
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });
        getContentPane().add(btnRegistrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 290, 80, -1));

        btnModificar.setText("Modificar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });
        getContentPane().add(btnModificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 290, 80, -1));

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        getContentPane().add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 290, 80, -1));

        btnTerminar.setText("Terminar");
        btnTerminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTerminarActionPerformed(evt);
            }
        });
        getContentPane().add(btnTerminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 290, 80, -1));
        getContentPane().add(lblImagen, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 390, 370));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        // TODO add your handling code here:
        estado(true);

    }//GEN-LAST:event_btnNuevoActionPerformed

    private void lstAfpValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstAfpValueChanged
        // TODO add your handling code here:
        int indice = lstAfp.getSelectedIndex();
        
        if(indice > -1){
            Objeto ObjAfp = (Objeto)modeloLista.getElementAt(indice);              
            txtCodigo.setText(String.valueOf(ObjAfp.getCodigo()));
            txtNombre.setText(ObjAfp.getDenominacion());
            txtPorcentaje.setText(String.valueOf(ObjAfp.getNumero()));                  
        }
    }//GEN-LAST:event_lstAfpValueChanged

    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed
        // TODO add your handling code here:
        obtenerDatos();       
        if(estado) {
                try {
                    afp = new Afp(nombre, porcentaje);                    
                    gestionarAfp = new ServGestionarAfp();
                    int registros_afectados = gestionarAfp.ingresarAfp(afp);       

                    if(registros_afectados == 1){
                        Mensaje.mostrarAfirmacion(this, Mensaje.REGISTRO_CREADO);
                        estadoDefault();
                    }
                }catch (Exception e) {
                    Mensaje.mostrarError(this, Mensaje.ERROR_INGRESO);
                }
        }else {        
                try {
                    afp = new Afp(idAfp, nombre, porcentaje);
                    gestionarAfp = new ServGestionarAfp();
                    int registros_afectados = gestionarAfp.modificarAfp(afp);
                    if(registros_afectados == 1){
                        Mensaje.mostrarAfirmacion(this, Mensaje.REGISTRO_ACTUALIZADO);
                        estadoDefault(); 
                    }
                } catch (Exception e) {
                    Mensaje.mostrarError(this, Mensaje.ERROR_ACTUALIZACION);
                }
        }        
    }//GEN-LAST:event_btnRegistrarActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        // TODO add your handling code here:
        if(!lstAfp.isSelectionEmpty()){
            estado(false);
       }else
            Mensaje.mostrarAdvertencia(this, Mensaje.ELEMENTO_NO_SELECCIONADO);
    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here: 
        if(txtCodigo.getText().length() > 0){
            idAfp = Integer.parseInt(txtCodigo.getText().trim());
        }
        String Nombre = txtNombre.getText();
        Double Porcentaje = Double.parseDouble(txtPorcentaje.getText());
        
        int seleccion = JOptionPane.showConfirmDialog(this,"Deseas Eliminar Afp","Eliminar Registro",JOptionPane.YES_NO_OPTION );
        if( seleccion == JOptionPane.YES_OPTION ) {           
            try {
                afp = new Afp(idAfp, Nombre, Porcentaje);
                gestionarAfp = new ServGestionarAfp();
                int registros_afectados = gestionarAfp.eliminarAfp(afp);
                
                if(registros_afectados == 1){
                    Mensaje.mostrarAfirmacion(this, Mensaje.REGISTRO_ELIMINADO);
                    estadoDefault();
                }   
            } catch (Exception e) {
                Mensaje.mostrarError(this, Mensaje.ERROR_ELIMINAR);
            }
        }
     
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnTerminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTerminarActionPerformed
        // TODO add your handling code here:
        estadoDefault();
    }//GEN-LAST:event_btnTerminarActionPerformed

    private void txtPorcentajeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPorcentajeKeyTyped
        // TODO add your handling code here:
        String patron_de_entrada = "0123456789.";
        if (txtPorcentaje.getText().length() == 5 || !patron_de_entrada.contains(String.valueOf(evt.getKeyChar())))  
            evt.consume();
    }//GEN-LAST:event_txtPorcentajeKeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnRegistrar;
    private javax.swing.JButton btnTerminar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel jpnDatosAfp;
    private javax.swing.JLabel lblAfps;
    private javax.swing.JLabel lblCodigo;
    private javax.swing.JLabel lblImagen;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JLabel lblPorcentaje;
    private javax.swing.JList<String> lstAfp;
    private javax.swing.JTextField txtCodigo;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtPorcentaje;
    // End of variables declaration//GEN-END:variables

    @Override
    public void estadoInicio() {
        this.excepcionNoSoporte(ExcepcionSinSoporteOperacion.crearNoSoportado());
    }

    @Override
    public void estado(boolean parEstado) {
        activarEntradas(true);
        estadoControles(true);
        txtNombre.requestFocus();  
        if(parEstado == true){
            estado = parEstado;
            btnNuevo.setEnabled(false);
            limpiarEntradas();            
            llenarLista();   
            btnRegistrar.setText(VariablesGlobales.ETIQUETA_BOTON_REGISTRAR);           
            setMnemonic(); 
        }else{
            estado = parEstado;               
            activarControles(true);
            btnRegistrar.setText(VariablesGlobales.ETIQUETA_BOTON_ACTUALIZAR);                
            setMnemonic();
        }      }

    @Override
    public void estadoDefault() {
        estilo();
        limpiarEntradas();
        activarControles(false);
        activarEntradas(false);
        txtCodigo.setEditable(false);   
        btnRegistrar.setText(VariablesGlobales.ETIQUETA_BOTON_REGISTRAR);
        llenarLista();
        ListModel model = lstAfp.getModel();
        int ultimo = model.getSize();
        lstAfp.setSelectedIndex(ultimo -1);
        eventoTecla();
    }

    @Override
    public void limpiarEntradas() {
        txtCodigo.setText("");
        txtNombre.setText("");
        txtPorcentaje.setText("");   
        lstAfp.removeAll();
    }

    @Override
    public void activarControles(boolean sw) {
        btnNuevo.setEnabled(!sw);
        btnRegistrar.setEnabled(sw);    
        ListModel model = lstAfp.getModel();
        if(model.getSize() > 0){
            btnModificar.setEnabled(!sw);
            btnEliminar.setEnabled(!sw);
        }
        btnTerminar.setEnabled(sw);
    }

    @Override
    public void activarEntradas(boolean sw) {
        txtCodigo.setEditable(false);
        txtNombre.setEditable(sw);
        txtPorcentaje.setEditable(sw);
        lstAfp.setEnabled(!sw);
    }

    @Override
    public void estadoControles(boolean sw) {
        btnRegistrar.setEnabled(sw);
        btnModificar.setEnabled(!sw);
        btnEliminar.setEnabled(!sw);
        btnTerminar.setEnabled(true);
    }

    @Override
    public void estadoEntradas(boolean sw) {
        this.excepcionNoSoporte(ExcepcionSinSoporteOperacion.crearNoSoportado());
    }

    @Override
    public void visibilidadControles(boolean sw) {
        this.excepcionNoSoporte(ExcepcionSinSoporteOperacion.crearNoSoportado());
    }

    @Override
    public void obtenerDatos() {
            if(txtNombre.getText().compareTo("")!=0 && txtPorcentaje.getText().compareTo("")!=0){
                if(txtCodigo.getText().length() > 0){
                    idAfp = Integer.parseInt(txtCodigo.getText().trim());
                }
                nombre = txtNombre.getText();
                porcentaje = (Double.parseDouble(txtPorcentaje.getText()));
            } else
                Mensaje.mostrarAdvertencia(this, Mensaje.DATOS_INCOMPLETOS );

    }

    @Override
    public void setMnemonic() {
        btnNuevo.setMnemonic(KeyEvent.VK_N);
        btnModificar.setMnemonic(KeyEvent.VK_M);
        btnEliminar.setMnemonic(KeyEvent.VK_E);
        btnTerminar.setMnemonic(KeyEvent.VK_T);    
        if(estado == true){
            btnRegistrar.setMnemonic(KeyEvent.VK_R);
        }else{
            btnRegistrar.setMnemonic(KeyEvent.VK_A);   
        }
    }

    @Override
    public void estilo() {
        this.setEstiloEtiquetas(new Object[]{lblCodigo, lblNombre, lblPorcentaje, lblAfps});
        this.setEstiloBotones(new Object[]{btnNuevo, btnRegistrar, btnModificar, btnEliminar, btnTerminar});
        this.setImagenFondo(lblImagen, getPreferredSize().height, getPreferredSize().width);
    }

    @Override
    public void eventoTecla() {
        jpnDatosAfp.addKeyListener(new AtajosTecladoDlg(this));
        txtCodigo.addKeyListener(new AtajosTecladoDlg(this));
        txtNombre.addKeyListener(new AtajosTecladoDlg(this));
        txtPorcentaje.addKeyListener(new AtajosTecladoDlg(this));
        lstAfp.addKeyListener(new AtajosTecladoDlg(this));
        btnNuevo.addKeyListener(new AtajosTecladoDlg(this));
        btnRegistrar.addKeyListener(new AtajosTecladoDlg(this));
        btnModificar.addKeyListener(new AtajosTecladoDlg(this));
        btnEliminar.addKeyListener(new AtajosTecladoDlg(this));
        btnTerminar.addKeyListener(new AtajosTecladoDlg(this));
    }
    
}
